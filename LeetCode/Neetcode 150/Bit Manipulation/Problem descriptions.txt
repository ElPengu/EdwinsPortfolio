Single Number
Easy
You are given a non-empty array of integers nums. Every integer appears twice except for one.

Return the integer that appears only once.

You must implement a solution with O(n) runtime complexity and use only 
O(1) extra space.



Number of One Bits
Easy
You are given an unsigned integer n. Return the number of 1 bits in its binary representation.

You may assume n is a non-negative integer which fits within 32-bits.



Counting Bits
Easy
Given an integer n, count the number of 1's in the binary representation of every number in the range [0, n].

Return an array output where output[i] is the number of 1's in the binary representation of i.



Reverse Bits
Easy
Given a 32-bit unsigned integer n, reverse the bits of the binary representation of n and return the result.



Missing Number
Easy
Given an array nums containing n integers in the range [0, n] without any duplicates, return the single number in the range that is missing from nums.

Follow-up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?



Sum of Two Integers
Medium
Given two integers a and b, return the sum of the two integers without using the + and - operators.



Reverse Integer
Medium
You are given a signed 32-bit integer x.

Return x after reversing each of its digits. After reversing, if x goes outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0 instead.

Solve the problem without using integers that are outside the signed 32-bit integer range.